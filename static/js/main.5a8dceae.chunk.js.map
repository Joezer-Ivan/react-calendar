{"version":3,"sources":["components/Header.js","components/DaysOfTheWeek.js","utils/generalUtils.js","components/CalenderCells.js","components/EventForm.js","components/EventItem.js","components/DailyEvents.js","utils/uuid.js","reducers/eventScheduleReducer.js","utils/localStorage.js","components/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","onClick","setCurrentMonth","subMonths","currentMonth","format","addMonths","DaysOfTheWeek","daysJsx","day","push","key","getEventsScheduledForDate","eventSchedule","dateObj","eventsObj","year_key","month_key","date_key","get12HourTimeString","_24HrTimeString","splitTime","split","hourNum","parseInt","minStr","period","hourStr","toString","slice","CalenderCells","eventScheduleContext","useContext","EventScheduleContext","monthStart","startOfMonth","monthEnd","endOfMonth","startDate","startOfWeek","endDate","endOfWeek","rows","days","formattedDate","i","eventList","eventId","event","startTime","subject","cloneDay","isSameMonth","isSameDay","todaysDate","onDateClick","Object","keys","length","addDays","EventForm","useState","setSubject","setStartTime","endTime","setEndTime","location","setLocation","description","setDescription","onSubmit","ev","preventDefault","dispatchType","uid","eventScheduleDispatch","type","date","closeFormCallBack","htmlFor","name","maxLength","placeholder","autoFocus","value","onChange","target","EventItem","editMode","setEditMode","title","DailyEvents","showNewEventForm","setShowNewEventForm","selectedDate","Fragment","setEventsView","uuid","s4","Math","floor","random","substring","eventScheduleReducer","state","action","newState","addEditEventForDate","map","rearrangedMap","sortedListOfKeys","sort","a","b","aTimeSplit","bTimeSplit","comparisonResult","rearrangeMapByEarliest","localStorage","setItem","JSON","stringify","createContext","initialEventSchedule","jsonStr","getItem","parse","getEventsFromLocalStorage","Calendar","Date","setSelectedDate","eventsView","useReducer","useCallback","Provider","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a8dceae.chunk.js","sourcesContent":["import React from 'react';\nimport {format, addMonths, subMonths} from 'date-fns';\n\nfunction Header(props) {\n    const dateFormat = \"MMMM yyyy\";\n\n    const nextMonth = () => {\n        props.setCurrentMonth(addMonths(props.currentMonth, 1));\n    };\n\n    const prevMonth = () => {\n        props.setCurrentMonth(subMonths(props.currentMonth, 1));\n    };\n    \n    return (\n        <div className=\"header row row-middle flex-around\">\n            <span className=\"icon anim-icon\" onClick={prevMonth}>chevron_left</span>\n            <span>{format(props.currentMonth, dateFormat)}</span>\n            <span className=\"icon anim-icon\" onClick={nextMonth}>chevron_right</span>\n        </div>\n    );\n}\n\nexport default Header\n","import React from 'react'\n\nfunction DaysOfTheWeek() {\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const daysJsx = [];\n    for (let day of days) {\n        daysJsx.push(\n            <div className=\"column col-center\" key={day}>\n                {day}\n            </div>\n        );\n    }\n    return <div className=\"days row\">{daysJsx}</div>;\n}\n\nexport default DaysOfTheWeek\n","import {format} from 'date-fns';\n\nexport const getEventsScheduledForDate = (eventSchedule, dateObj) => {\n    let eventsObj = {};\n    const year_key = `y_${format(dateObj, 'yyyy')}`;\n    const month_key = `m_${format(dateObj, 'MM')}`;\n    const date_key = `d_${format(dateObj, 'dd')}`;\n    if (eventSchedule[year_key] && eventSchedule[year_key][month_key] && eventSchedule[year_key][month_key][date_key]){\n        eventsObj = eventSchedule[year_key][month_key][date_key];\n    }\n    return eventsObj;\n};\n\nexport const get12HourTimeString = (_24HrTimeString) => {\n    if (!_24HrTimeString) {return ''}\n\n    const splitTime = _24HrTimeString.split(':');\n    let hourNum = parseInt(splitTime[0]);\n    let minStr = splitTime[1];\n    let period = 'AM';\n    if (hourNum >= 12){\n        period = 'PM';\n        hourNum %= 12;\n    }\n    let hourStr = (hourNum === 0) ? '12' : ('0' + hourNum.toString()).slice(-2);\n    return `${hourStr}:${minStr} ${period}`;\n}\n\nexport const rearrangeMapByEarliest = (map) => {\n    const listOfKeys = Object.keys(map);\n    const rearrangedMap = {};\n    const sortedListOfKeys = listOfKeys.sort((a, b) => {\n        if (!map[a].startTime && !map[b].startTime) {return 0}\n        if (!map[a].startTime) {return -1}\n        if (!map[b].startTime) {return 1}\n\n        const aTimeSplit = map[a].startTime.split(':');\n        const bTimeSplit = map[b].startTime.split(':');\n        \n        let comparisonResult = parseInt(aTimeSplit[0]) - parseInt(bTimeSplit[0]);\n        comparisonResult = (comparisonResult === 0) ? (parseInt(aTimeSplit[1]) - parseInt(bTimeSplit[1])) : comparisonResult;\n        return comparisonResult;\n    });\n    for (let key of sortedListOfKeys){\n        rearrangedMap[key] = map[key];\n    }\n    return rearrangedMap;\n};","import React, {useContext, useEffect, useRef} from 'react'\nimport { format, startOfWeek, endOfWeek, addDays, startOfMonth, endOfMonth, isSameDay, isSameMonth } from \"date-fns\";\nimport { EventScheduleContext } from './Calendar';\nimport {getEventsScheduledForDate, get12HourTimeString} from '../utils/generalUtils';\n\nfunction CalenderCells(props) {\n    const eventScheduleContext = useContext(EventScheduleContext);\n    \n    const monthStart = startOfMonth(props.currentMonth);\n    const monthEnd = endOfMonth(monthStart);\n    const startDate = startOfWeek(monthStart);\n    const endDate = endOfWeek(monthEnd);\n    const dateFormat = \"d\";\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n        for (let i = 0; i < 7; i++) {\n            const eventsObj = getEventsScheduledForDate(eventScheduleContext.eventSchedule, day);\n            const eventList = [];\n            for(let eventId in eventsObj){\n                const event = eventsObj[eventId];\n                eventList.push(\n                    <li key={eventId}>\n                        {event.startTime && \n                            <span className='mr5'>{get12HourTimeString(event.startTime)}</span>\n                        }\n                        <span className='event-subject'>{event.subject}</span>\n                    </li>\n                );\n            }\n            formattedDate = format(day, dateFormat);\n            const cloneDay = day;\n            days.push(\n                <div\n                    className={`column cell ${!isSameMonth(day, monthStart)\n                        ? \"disabled\" : isSameDay(day, props.todaysDate)\n                            ? \"selected\" : \"\"}`}\n                    key={day}\n                    onClick={() => props.onDateClick(cloneDay)}\n                >\n                    <span className=\"number\">{formattedDate}</span>\n                    <ul className=\"ul-no-bullets cell-event-list\">{eventList}</ul>\n                    {\n                        (Object.keys(eventsObj).length > 3) &&\n                        <span className='overflow-banner'>...more events</span>\n                    }\n                </div>\n            );\n            day = addDays(day, 1);\n        }\n        rows.push(\n            <div className=\"row\" key={day}> {days} </div>\n        );\n        days = [];\n    }\n\n    return <div className=\"body\">{rows}</div>;\n}\n\nexport default CalenderCells\n","import React, {useState, useContext} from 'react'\nimport { EventScheduleContext } from './Calendar';\n\nfunction EventForm(props) {\n    const [subject, setSubject] = useState(props.subject || '');\n    const [startTime, setStartTime] = useState(props.startTime || '');\n    const [endTime, setEndTime] = useState(props.endTime || '');\n    const [location, setLocation] = useState(props.location || '');\n    const [description, setDescription] = useState(props.description || '');\n\n    const eventScheduleContext = useContext(EventScheduleContext);\n    \n    const handleFormSubmit = (ev) => {\n        ev.preventDefault();\n        const dispatchType = props.uid ? 'EDIT_EVENT' : 'ADD_EVENT';\n        const uid = props.uid;\n        const event = {\n            uid,\n            subject,\n            startTime,\n            endTime,\n            location,\n            description\n        };\n        eventScheduleContext.eventScheduleDispatch({\n            type : dispatchType,\n            date : props.date,\n            event : event\n        });\n        props.closeFormCallBack();\n    };\n\n    return (\n        <li className='event-card'>\n            <form className='event-form' onSubmit={handleFormSubmit}>\n                <span className=\"form-row\">\n                    <label htmlFor=\"subject\">Subject</label>\n                    <input\n                        name=\"subject\"\n                        type=\"type\"\n                        maxLength=\"30\"\n                        placeholder={'Event subject'}\n                        autoFocus={true}\n                        value={subject}\n                        onChange={(ev) => setSubject(ev.target.value)}\n                    />\n                </span>\n                <span className=\"form-row\">\n                    <label htmlFor=\"startTime\">Start time</label>\n                    <input\n                        className=\"mr10\"\n                        name=\"startTime\"\n                        type=\"time\"\n                        value={startTime}\n                        onChange={(ev) => setStartTime(ev.target.value)}\n                    />\n                    <label htmlFor=\"endTime\">End time</label>\n                    <input\n                        name=\"endTime\"\n                        type=\"time\"\n                        value={endTime}\n                        onChange={(ev) => setEndTime(ev.target.value)}\n                    />\n                </span>\n                <span className=\"form-row\">\n                    <label htmlFor=\"location\">Location</label>\n                    <input\n                        name=\"location\"\n                        type=\"text\"\n                        value={location}\n                        onChange={(ev) => setLocation(ev.target.value)}\n                    />\n                </span>\n                <span className=\"form-row\">\n                    <label htmlFor=\"description\">Description</label>\n                    <textarea\n                        name=\"description\"\n                        type=\"text\"\n                        value={description}\n                        onChange={(ev) => setDescription(ev.target.value)}\n                    />\n                </span>\n\n                <button type=\"submit\" className=\"mr10 btn-primary\">Save</button>\n                <button type=\"cancel\" onClick={() => props.closeFormCallBack()}>Cancel</button>\n            </form>\n        </li>\n    )\n}\n\nexport default EventForm\n","import React, {useState, useContext} from 'react';\nimport EventForm from './EventForm';\nimport {get12HourTimeString} from '../utils/generalUtils'\nimport { EventScheduleContext } from './Calendar';\n\nfunction EventItem(props) {\n    const {event} = props;\n    const [editMode, setEditMode] = useState(false);\n    const eventScheduleContext = useContext(EventScheduleContext);\n    const deleteEvent = () => {\n        eventScheduleContext.eventScheduleDispatch({\n            type : 'DELETE_EVENT',\n            date : props.date,\n            event : event\n        });\n    }\n\n    if (editMode){\n        return (\n            <EventForm \n                date = {props.date}\n                closeFormCallBack = {() => {setEditMode(false)}}\n                uid = {event.uid}\n                subject = {event.subject}\n                startTime = {event.startTime}\n                endTime = {event.endTime}\n                location = {event.location}\n                description = {event.description}\n            />\n        )\n    } else {\n        return (\n            <li className='event-card'>\n                <div className='flex-bx flex-between row-middle pb5'>\n                    <div className='card-title'>\n                        <span className='event-subject mr10'>{event.subject}</span>\n                        {event.startTime &&\n                            <span>{get12HourTimeString(event.startTime)} - {get12HourTimeString(event.endTime)}</span>\n                        }\n                    </div>\n                    <div className='flex-bx'>\n                        <span className=\"icon anim-icon mr10\" title='Edit' onClick={() => setEditMode(true)}>edit</span>\n                        <span className=\"icon anim-icon\" title='Delete' onClick={() => deleteEvent()}>delete_outline</span>\n                    </div>\n                </div>\n                {event.location && \n                    <div className='flex-bx row-middle pb5'>\n                        <span className=\"icon\">location_on</span>\n                        <span>{event.location}</span>\n                    </div>\n                }\n                {event.description && \n                    <span>{event.description}</span>\n                }\n            </li>\n        );\n    }\n}\n\nexport default EventItem;\n","import React, {useContext, useState} from 'react';\nimport {format} from 'date-fns';\nimport {EventScheduleContext} from './Calendar';\nimport {getEventsScheduledForDate} from '../utils/generalUtils'\nimport EventItem from './EventItem';\nimport EventForm from './EventForm';\n\nfunction DailyEvents(props) {\n    const dateFormat = 'dd MMMM yyyy';\n    const [showNewEventForm, setShowNewEventForm] = useState(false);\n    const eventScheduleContext = useContext(EventScheduleContext);\n    const eventsObj = getEventsScheduledForDate(eventScheduleContext.eventSchedule, props.selectedDate);\n    const eventList = [];\n    for(let eventId in eventsObj){\n        const event = eventsObj[eventId];\n        eventList.push(\n            <EventItem key={eventId} event={event} date={props.selectedDate}/>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"modalMask\" onClick={() => props.setEventsView(false)}></div>\n            <div className=\"popover modal daily-events\">\n                <div className=\"header flex-bx flex-between\">\n                    <span>{format(props.selectedDate, dateFormat)}</span>\n                    <div>\n                        <button className='mr10 btn-primary' onClick={() => setShowNewEventForm(true)}>\n                            <span className=\"icon\">add</span>\n                            New Event\n                        </button>\n                        <span className=\"icon anim-icon\" onClick={() => props.setEventsView(false)}>close</span>\n                    </div>\n                </div>\n                <div>\n                    <ul className='events-list ul-no-bullets'>\n                        {showNewEventForm &&\n                            <EventForm \n                                date = {props.selectedDate}\n                                closeFormCallBack={() => {setShowNewEventForm(false)}}\n                            />\n                        }\n                        {eventList.length > 0 ? \n                            eventList : \n                            (!showNewEventForm &&\n                                `You don't have any events scheduled for this day...`\n                            )\n                        }\n                    </ul>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default DailyEvents\n","const uuid = () => {\n    function s4 () {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1)\n    }\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4()\n  }\n  \n  export default uuid\n  ","import {format} from 'date-fns';\nimport uuid from '../utils/uuid';\nimport {getEventsScheduledForDate, rearrangeMapByEarliest} from '../utils/generalUtils';\nimport {setEventsToLocalStorage} from '../utils/localStorage';\n\nexport const eventScheduleReducer = (state, action) => {\n    let newState = {...state};\n\n    const deleteEventFromDate = (uid, dateObj) => {\n        let eventsObjForDate = getEventsScheduledForDate(newState, action.date);\n        delete eventsObjForDate[uid];\n    };\n\n    const addEditEventForDate = (event, dateObj) => {\n        const year_key = `y_${format(dateObj, 'yyyy')}`;\n        const month_key = `m_${format(dateObj, 'MM')}`;\n        const date_key = `d_${format(dateObj, 'dd')}`;\n        if (!newState[year_key]){\n            newState[year_key] = {};\n        }\n        if (!newState[year_key][month_key]){\n            newState[year_key][month_key] = {};\n        }\n        if (!newState[year_key][month_key][date_key]){\n            newState[year_key][month_key][date_key] = {};\n        }\n        newState[year_key][month_key][date_key][event.uid] = event;\n        newState[year_key][month_key][date_key] = rearrangeMapByEarliest(newState[year_key][month_key][date_key]);\n    };\n    \n    switch (action.type) {\n        case 'ADD_EVENT':\n            action.event.uid = uuid();\n            addEditEventForDate(action.event, action.date);\n            break;\n        case 'EDIT_EVENT':\n            addEditEventForDate(action.event, action.date);\n            break;\n        case 'DELETE_EVENT':\n            deleteEventFromDate(action.event.uid, action.date);\n            break;\n        default:\n            break;\n    }\n    setEventsToLocalStorage(newState);\n    return newState;\n};\n","export const getEventsFromLocalStorage = () => {\n    let jsonStr = localStorage.getItem('calendar-scheduled-events');\n    return JSON.parse(jsonStr);\n}\n\nexport const setEventsToLocalStorage = (eventsObj) => {\n    localStorage.setItem('calendar-scheduled-events', JSON.stringify(eventsObj));\n}\n\n\n/*\nlet testEvents = {\n    y_2020: {\n        m_04: {\n            d_10: {\n                '2cca33c4-294a-c05d-91ca-4b24c111dfdv' : {\n                    uid : '2cca33c4-294a-c05d-91ca-4b24c111dfdv',\n                    subject : 'test',\n                    startTime : '1:20',\n                    endTime : '8:45',\n                    location : 'office',\n                    description : 'this is a test description'\n                },\n                '1cca33c4-294a-c05d-91ca-4b24c111dfdd' : {\n                    uid : '1cca33c4-294a-c05d-91ca-4b24c111dfdd',\n                    subject : 'moi birthday',\n                    startTime : '11:20',\n                    endTime : '18:45',\n                    location : 'house',\n                    description : 'yo shawty ish your birthday, we gonna paarty like ish yo birthday!'\n                }\n            },\n            d_15: {\n                '3cca33c4-294a-c05d-91ca-4b24c111dfdv' : {\n                    uid : '3cca33c4-294a-c05d-91ca-4b24c111dfdv',\n                    subject : 'aa',\n                    startTime : '14:20',\n                    endTime : '18:00',\n                    location : 'toot',\n                    description : 'teet'\n                }\n            }\n        },\n        m_08: {\n            d_23: {\n                '5cca33c4-294a-c05d-91ca-4b24c111dfdv' : {\n                    uid : '5cca33c4-294a-c05d-91ca-4b24c111dfdv',\n                    subject : 'today yaar 222',\n                    startTime : '01:20',\n                    endTime : '12:45',\n                    location : 'home office - 2',\n                    description : 'meeting'\n                },\n                '4cca33c4-294a-c05d-91ca-4b24c111dfdv' : {\n                    uid : '4cca33c4-294a-c05d-91ca-4b24c111dfdv',\n                    subject : 'today yaar',\n                    startTime : '11:20',\n                    endTime : '18:45',\n                    location : 'home office',\n                    description : 'meeting'\n                }\n            }\n        }\n    }\n};\n*/","import React, { useState, useReducer, createContext, useCallback } from \"react\";\n\nimport Header from './Header';\nimport DaysOfTheWeek from './DaysOfTheWeek';\nimport CalenderCells from './CalenderCells';\nimport DailyEvents from \"./DailyEvents\";\nimport {eventScheduleReducer} from '../reducers/eventScheduleReducer';\nimport {getEventsFromLocalStorage} from '../utils/localStorage';\n\nexport const EventScheduleContext = createContext();\n\nconst initialEventSchedule = getEventsFromLocalStorage() || {};\n\nconst Calendar = () => {\n    const [todaysDate, setTodaysDate] = useState(new Date());\n    const [currentMonth, setCurrentMonth] = useState(new Date());\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [eventsView, setEventsView] = useState(false);\n    \n    const [eventSchedule, eventScheduleDispatch] = useReducer(eventScheduleReducer, initialEventSchedule);\n\n    const onDateClick = useCallback((day) => {\n        setSelectedDate(day);\n        setEventsView(true);\n    }, []);\n\n    return (\n        <EventScheduleContext.Provider value={{eventSchedule: eventSchedule, eventScheduleDispatch: eventScheduleDispatch}}>\n            <div className=\"calendar\">\n                <Header currentMonth={currentMonth} setCurrentMonth={setCurrentMonth}/>\n                <DaysOfTheWeek />\n                <CalenderCells currentMonth={currentMonth} todaysDate={todaysDate} onDateClick={onDateClick}/>\n                {eventsView && \n                    <DailyEvents selectedDate={selectedDate} setEventsView={setEventsView} />\n                }\n            </div>\n        </EventScheduleContext.Provider>\n    );\n};\n\nexport default Calendar;","import React from 'react';\nimport Calendar from './components/Calendar'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Calendar />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}