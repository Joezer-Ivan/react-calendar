{"version":3,"sources":["constants/dateFnsFormats.js","components/Header.js","components/DaysOfTheWeek.js","utils/generalUtils.js","components/CalendarCell.js","components/CalenderBody.js","components/EventForm.js","components/EventCard.js","components/EventItem.js","components/DailyEvents.js","components/ToastNotification.js","utils/notifications.js","components/NotificationHandler.js","constants/eventNotificationTime.js","components/ExportAsCSV.js","utils/uuid.js","utils/localStorage.js","reducers/eventScheduleReducer.js","components/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["DATE_FORMAT","Header","props","className","onClick","setCurrentMonth","subMonths","currentMonth","format","addMonths","DaysOfTheWeek","daysJsx","day","push","key","getEventsScheduledForDate","eventSchedule","dateObj","eventsObj","year_key","month_key","date_key","get12HourTimeString","_24HrTimeString","splitTime","split","hourNum","parseInt","minStr","period","hourStr","toString","slice","isTimeStrInOrder","a","b","aTimeSplit","bTimeSplit","comparisonResult","timeComparisionMethod","insertIntoFormattedEventsObj","formattedEventsObj","event","startDateTime","uid","map","rearrangedMap","sortedListOfKeys","Object","keys","sort","rearrangeMapByEarliest","convertTimeStringToDateObj","timeStr","timeStrArray","duplicateDateObj","Date","setHours","setMinutes","convertDateObjToTimeString","getHours","getMinutes","join","CalendarCell","cellContainerRef","useRef","useState","eventListOverflow","setEventListOverflow","eventScheduleContext","useContext","EventScheduleContext","eventList","eventId","subject","useEffect","current","scrollHeight","clientHeight","conditionalClassNames","isSameMonth","monthStart","isSameDay","todaysDate","ref","onDateClick","CalenderBody","startOfMonth","monthEnd","endOfMonth","startDate","startOfWeek","endDate","endOfWeek","rows","days","i","addDays","EventForm","eventDetails","setSubject","startTimeString","setStartTimeString","endDateTime","endTimeString","setEndTimeString","location","setLocation","description","setDescription","subjectErrorMessage","setSubjectErrorMessage","timeErrorMessage","setTimeErrorMessage","onSubmit","ev","preventDefault","isValid","subjectError","timeError","trim","validateForm","dispatchType","date","eventScheduleDispatch","type","closeFormCallBack","htmlFor","name","maxLength","placeholder","autoFocus","value","onChange","target","EventCard","showEditOptions","title","handleEditBtnClick","handleDeleteBtnClick","EventItem","editMode","setEditMode","DailyEvents","showNewEventForm","setShowNewEventForm","selectedDate","Fragment","setEventsView","length","ToastNotification","onCloseHandler","newDesktopNotification","window","startTime","endTime","options","body","Notification","permission","requestPermission","then","alert","NotificationHandler","timeEventsMap","inAppNotificationObj","setInAppNotificationObj","timeKey","hasOwnProperty","minuteTimer","setInterval","setTodaysDate","addToNotifObj","minsFromNow","notifyForTime","addMinutes","formattedHours","formattedMins","notifyForTimeKey","events","inAppNotifClosed","desktopNotifShown","clearInterval","toastNotifs","eventUid","cloneList","removeFromInAppNotificationObj","ExportAsCSV","constructEventsArray","eventsArray","getEventsScheduledForMonth","dayKey","dayStr","dateObjForEvent","setDate","formattedDateString","daysEventsObj","fileName","getRowStr","row","finalVal","j","result","replace","search","csvFile","blob","Blob","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","appendChild","click","removeChild","exportToCSV","uuid","s4","Math","floor","random","substring","fetchEvents","jsonStr","localStorage","getItem","JSON","parse","setEventsToLocalStorage","action","toUTCString","convertDateTimeObjToUtcString","setItem","stringify","eventScheduleReducer","state","newState","addEditEventForDate","createContext","initialEventSchedule","getEventsFromLocalStorage","Calendar","setSelectedDate","eventsView","useReducer","useCallback","Provider","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.19991ceb.chunk.js","sourcesContent":["export const DATE_FORMAT = {\n    timeStr_12Hr : 'p',\n    dayOfMonth : 'd',\n    fullDate : 'dd MMMM yyyy',\n    exportDate : 'dd/MM/yy',\n    monthName : 'LLLL',\n    monthYear : 'MMMM yyyy',\n    fullYear : 'yyyy',\n    monthMM : 'MM',\n    dateDD : 'dd'\n}","import React from 'react';\nimport {format, addMonths, subMonths} from 'date-fns';\nimport {DATE_FORMAT} from '../constants/dateFnsFormats';\n\nfunction Header(props) {\n    const nextMonth = () => {\n        props.setCurrentMonth(addMonths(props.currentMonth, 1));\n    };\n    const prevMonth = () => {\n        props.setCurrentMonth(subMonths(props.currentMonth, 1));\n    };\n    \n    return (\n        <div className=\"header row row-middle flex-around\">\n            <span className=\"icon anim-icon\" onClick={prevMonth}>chevron_left</span>\n            <span>{format(props.currentMonth, DATE_FORMAT.monthYear)}</span>\n            <span className=\"icon anim-icon\" onClick={nextMonth}>chevron_right</span>\n        </div>\n    );\n}\n\nexport default Header\n","import React from 'react'\n\nfunction DaysOfTheWeek() {\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const daysJsx = [];\n    for (let day of days) {\n        daysJsx.push(\n            <div className=\"column col-center\" key={day}>\n                {day}\n            </div>\n        );\n    }\n    return <div className=\"days row\">{daysJsx}</div>;\n}\n\nexport default DaysOfTheWeek\n","import {format} from 'date-fns';\nimport {DATE_FORMAT} from '../constants/dateFnsFormats';\n\nconst rearrangeMapByEarliest = (map) => {\n    const listOfKeys = Object.keys(map);\n    const rearrangedMap = {};\n    const sortedListOfKeys = listOfKeys.sort((a, b) => {\n        if ((!map[a].startDateTime && !map[b].startDateTime) || (map[a].startDateTime === map[b].startDateTime)){return 0}\n        if (!map[a].startDateTime) {return -1}\n        if (!map[b].startDateTime) {return 1}\n        \n        return (map[a].startDateTime < map[b].startDateTime) ? 1 : -1;\n    });\n    for (let key of sortedListOfKeys){\n        rearrangedMap[key] = map[key];\n    }\n    return rearrangedMap;\n};\n\nconst timeComparisionMethod = (a, b) => {\n    const aTimeSplit = a.split(':');\n    const bTimeSplit = b.split(':');\n    \n    let comparisonResult = parseInt(aTimeSplit[0]) - parseInt(bTimeSplit[0]);\n    comparisonResult = (comparisonResult === 0) ? (parseInt(aTimeSplit[1]) - parseInt(bTimeSplit[1])) : comparisonResult;\n    return comparisonResult;\n}\n\nexport const getEventsScheduledForDate = (eventSchedule, dateObj) => {\n    let eventsObj = {};\n    const year_key = `y_${format(dateObj, 'yyyy')}`;\n    const month_key = `m_${format(dateObj, 'MM')}`;\n    const date_key = `d_${format(dateObj, 'dd')}`;\n    if (eventSchedule[year_key] && eventSchedule[year_key][month_key] && eventSchedule[year_key][month_key][date_key]){\n        eventsObj = eventSchedule[year_key][month_key][date_key];\n    }\n    return eventsObj;\n};\n\nexport const getEventsScheduledForMonth = (eventSchedule, dateObj) => {\n    let eventsObj = {};\n    const year_key = `y_${format(dateObj, 'yyyy')}`;\n    const month_key = `m_${format(dateObj, 'MM')}`;\n    if (eventSchedule[year_key] && eventSchedule[year_key][month_key]){\n        eventsObj = eventSchedule[year_key][month_key];\n    }\n    return eventsObj;\n};\n\nexport const get12HourTimeString = (_24HrTimeString) => {\n    if (!_24HrTimeString) {return ''}\n\n    const splitTime = _24HrTimeString.split(':');\n    let hourNum = parseInt(splitTime[0]);\n    let minStr = splitTime[1];\n    let period = 'AM';\n    if (hourNum >= 12){\n        period = 'PM';\n        hourNum %= 12;\n    }\n    let hourStr = (hourNum === 0) ? '12' : ('0' + hourNum.toString()).slice(-2);\n    return `${hourStr}:${minStr} ${period}`;\n}\n\nexport const isTimeStrInOrder = (a, b) => {\n    let comparisionResult = timeComparisionMethod(a, b);\n    return (comparisionResult < 0);\n}\n\nexport const insertIntoFormattedEventsObj = (formattedEventsObj, event) => {\n    const dateObj = event.startDateTime;\n    const year_key = `y_${format(dateObj, DATE_FORMAT.fullYear)}`;\n    const month_key = `m_${format(dateObj, DATE_FORMAT.monthMM)}`;\n    const date_key = `d_${format(dateObj, DATE_FORMAT.dateDD)}`;\n    if (!formattedEventsObj[year_key]){\n        formattedEventsObj[year_key] = {};\n    }\n    if (!formattedEventsObj[year_key][month_key]){\n        formattedEventsObj[year_key][month_key] = {};\n    }\n    if (!formattedEventsObj[year_key][month_key][date_key]){\n        formattedEventsObj[year_key][month_key][date_key] = {};\n    }\n    formattedEventsObj[year_key][month_key][date_key][event.uid] = event;\n    formattedEventsObj[year_key][month_key][date_key] = rearrangeMapByEarliest(formattedEventsObj[year_key][month_key][date_key]);\n}\n\nexport const convertTimeStringToDateObj = (timeStr, dateObj) => {\n    const timeStrArray = timeStr.split(':');\n    const duplicateDateObj = new Date(dateObj.toString());\n    duplicateDateObj.setHours(timeStrArray[0]);\n    duplicateDateObj.setMinutes(timeStrArray[1]);\n    return duplicateDateObj;\n}\nexport const convertDateObjToTimeString = (dateObj) => {\n    if (!dateObj){ return '' };\n\n    const timeStrArray = [];\n    timeStrArray.push(('0' + dateObj.getHours()).slice(-2));\n    timeStrArray.push(('0' + dateObj.getMinutes()).slice(-2));\n    return timeStrArray.join(':');\n}\n","import React, {useState, useContext, useEffect, useRef} from 'react'\nimport {format, isSameMonth, isSameDay} from 'date-fns';\nimport { EventScheduleContext } from './Calendar';\nimport {getEventsScheduledForDate} from '../utils/generalUtils';\nimport {DATE_FORMAT} from '../constants/dateFnsFormats';\n\nfunction CalendarCell(props) {\n    const cellContainerRef = useRef(null);\n    const [eventListOverflow, setEventListOverflow] = useState(false);\n    const eventScheduleContext = useContext(EventScheduleContext);\n    const eventsObj = getEventsScheduledForDate(eventScheduleContext.eventSchedule, props.day);\n    const eventList = [];\n    \n    for(let eventId in eventsObj){\n        const event = eventsObj[eventId];\n        eventList.push(\n            <li key={eventId}>\n                {event.startDateTime && \n                    <span className='mr5'>{format(event.startDateTime, DATE_FORMAT.timeStr_12Hr)}</span>\n                }\n                <span className='event-subject'>{event.subject}</span>\n            </li>\n        );\n    }\n\n    useEffect(() => {\n        (cellContainerRef.current.scrollHeight - cellContainerRef.current.clientHeight) > 0 ? setEventListOverflow(true) : setEventListOverflow(false);\n    }, [eventsObj])\n    \n    let conditionalClassNames = '';\n    if (!isSameMonth(props.day, props.monthStart)){ conditionalClassNames += ' disabled' };\n    if (isSameDay(props.day, props.todaysDate)){ conditionalClassNames += ' highlighted' };\n\n    return(\n        <div\n            className={`column cell ${conditionalClassNames}`}\n            ref={cellContainerRef}\n            onClick={() => props.onDateClick(props.day)}\n        >\n            <span className=\"number\">{format(props.day, DATE_FORMAT.dayOfMonth)}</span>\n            <ul className=\"ul-no-bullets cell-event-list\">{eventList}</ul>\n            {eventListOverflow &&\n                <span className='overflow-banner'>...more events</span>\n            }\n        </div>\n    );\n}\n\nexport default CalendarCell;\n","import React from 'react'\nimport { startOfWeek, endOfWeek, addDays, startOfMonth, endOfMonth } from \"date-fns\";\nimport CalendarCell from './CalendarCell';\n\nfunction CalenderBody(props) {\n    const monthStart = startOfMonth(props.currentMonth);\n    const monthEnd = endOfMonth(monthStart);\n    const startDate = startOfWeek(monthStart);\n    const endDate = endOfWeek(monthEnd);\n    const rows = [];\n    let days = [];\n    let day = startDate;\n\n    while (day <= endDate) {\n        for (let i = 0; i < 7; i++) {\n            days.push(\n                <CalendarCell \n                    day = {day}\n                    key = {day}\n                    monthStart = {monthStart}\n                    todaysDate = {props.todaysDate}\n                    onDateClick = {props.onDateClick}\n                />\n            );\n            day = addDays(day, 1);\n        }\n        rows.push(\n            <div className=\"row\" key={day}> {days} </div>\n        );\n        days = [];\n    }\n\n    return <div className=\"body\">{rows}</div>;\n}\n\nexport default CalenderBody;\n","import React, {useState, useContext} from 'react'\nimport { EventScheduleContext } from './Calendar'\nimport { isTimeStrInOrder, convertDateObjToTimeString, convertTimeStringToDateObj } from '../utils/generalUtils'\n\nfunction EventForm(props) {\n    const eventDetails = props.event || {};\n    const [subject, setSubject] = useState(eventDetails.subject || '');\n    const [startTimeString, setStartTimeString] = useState(convertDateObjToTimeString(eventDetails.startDateTime) || '08:00');\n    const [endTimeString, setEndTimeString] = useState(convertDateObjToTimeString(eventDetails.endDateTime) || '18:00');\n    const [location, setLocation] = useState(eventDetails.location || '');\n    const [description, setDescription] = useState(eventDetails.description || '');\n    const [subjectErrorMessage, setSubjectErrorMessage] = useState('')\n    const [timeErrorMessage, setTimeErrorMessage] = useState('')\n    const eventScheduleContext = useContext(EventScheduleContext);\n    \n    const validateForm = () => {\n        let isValid = true;\n        let subjectError = '';\n        let timeError = '';\n        if (subject.trim() === ''){\n            subjectError = 'Subject cannot be empty';\n            isValid = false;\n        }\n        if (startTimeString.trim() === '' || endTimeString.trim() === ''){\n            timeError = 'Start and End time cannot be empty';\n            isValid = false;\n        }\n        if (!isTimeStrInOrder(startTimeString, endTimeString)){\n            timeError = 'End Time must be ahead of start time';\n            isValid = false;\n        }\n\n        if (!isValid){\n            setSubjectErrorMessage(subjectError);\n            setTimeErrorMessage(timeError);\n        }\n        return isValid;\n    }\n    const handleFormSubmit = (ev) => {\n        ev.preventDefault();\n        const isValid = validateForm();\n        if (isValid){\n            const dispatchType = eventDetails.uid ? 'EDIT_EVENT' : 'ADD_EVENT';\n            const uid = eventDetails.uid;\n            const event = {\n                uid,\n                subject,\n                location,\n                description,\n                startDateTime : convertTimeStringToDateObj(startTimeString, props.date),\n                endDateTime : convertTimeStringToDateObj(endTimeString, props.date),\n            };\n            eventScheduleContext.eventScheduleDispatch({\n                type : dispatchType,\n                event : event\n            });\n            props.closeFormCallBack();\n        }\n    };\n\n    return (\n        <li className='event-card'>\n            <form className='event-form' onSubmit={handleFormSubmit}>\n                <span className=\"form-row\">\n                    <label htmlFor=\"subject\">Subject *</label>\n                    <input\n                        name=\"subject\"\n                        type=\"type\"\n                        maxLength=\"30\"\n                        placeholder={'Event subject'}\n                        autoFocus={true}\n                        value={subject}\n                        onChange={(ev) => setSubject(ev.target.value)}\n                    />\n                </span>\n                {subjectErrorMessage && \n                    <div className=\"form-validation-error\">{subjectErrorMessage}</div>\n                }\n                <span className=\"form-row\">\n                    <label htmlFor=\"startTime\">Start time</label>\n                    <input\n                        className=\"mr10\"\n                        name=\"startTime\"\n                        type=\"time\"\n                        value={startTimeString}\n                        onChange={(ev) => setStartTimeString(ev.target.value)}\n                    />\n                    <label htmlFor=\"endTime\">End time</label>\n                    <input\n                        name=\"endTime\"\n                        type=\"time\"\n                        value={endTimeString}\n                        onChange={(ev) => setEndTimeString(ev.target.value)}\n                    />\n                </span>\n                {timeErrorMessage && \n                    <div className=\"form-validation-error\">{timeErrorMessage}</div>\n                }\n                <span className=\"form-row\">\n                    <label htmlFor=\"location\">Location</label>\n                    <input\n                        name=\"location\"\n                        type=\"text\"\n                        value={location}\n                        onChange={(ev) => setLocation(ev.target.value)}\n                    />\n                </span>\n                <span className=\"form-row\">\n                    <label htmlFor=\"description\">Description</label>\n                    <textarea\n                        name=\"description\"\n                        type=\"text\"\n                        value={description}\n                        onChange={(ev) => setDescription(ev.target.value)}\n                    />\n                </span>\n\n                <button type=\"submit\" className=\"mr10 btn-primary\">Save</button>\n                <button type=\"cancel\" onClick={() => props.closeFormCallBack()}>Cancel</button>\n            </form>\n        </li>\n    )\n}\n\nexport default EventForm\n","import React from 'react';\nimport {format} from 'date-fns';\nimport {DATE_FORMAT} from '../constants/dateFnsFormats';\n\nfunction EventCard(props) {\n    return (\n        <div className='event-card'>\n            <div className='flex-bx flex-between row-middle pb5'>\n                <div className='card-title'>\n                    <span className='event-subject mr10'>{props.event.subject}</span>\n                    {props.event.startDateTime &&\n                        <span>{format(props.event.startDateTime, DATE_FORMAT.timeStr_12Hr)} - {format(props.event.endDateTime, DATE_FORMAT.timeStr_12Hr)}</span>\n                    }\n                </div>\n                {props.showEditOptions && \n                    <div className='flex-bx'>\n                        <span className=\"icon anim-icon mr10\" title='Edit' onClick={props.handleEditBtnClick}>edit</span>\n                        <span className=\"icon anim-icon\" title='Delete' onClick={props.handleDeleteBtnClick}>delete_outline</span>\n                    </div>\n                }\n            </div>\n            {props.event.location && \n                <div className='flex-bx row-middle pb5'>\n                    <span className=\"icon\">location_on</span>\n                    <span>{props.event.location}</span>\n                </div>\n            }\n            {props.event.description && \n                <span>{props.event.description}</span>\n            }\n        </div>\n    )\n}\n\nexport default EventCard\n","import React, {useState, useContext} from 'react';\nimport { EventScheduleContext } from './Calendar';\nimport EventForm from './EventForm';\nimport EventCard from './EventCard';\n\nfunction EventItem(props) {\n    const {event} = props;\n    const [editMode, setEditMode] = useState(false);\n    const eventScheduleContext = useContext(EventScheduleContext);\n    const handleDeleteBtnClick = () => {\n        eventScheduleContext.eventScheduleDispatch({\n            type : 'DELETE_EVENT',\n            event : event\n        });\n    }\n\n    if (editMode){\n        return (\n            <EventForm \n                date = {props.date}\n                closeFormCallBack = {() => {setEditMode(false)}}\n                event = {event}\n            />\n        )\n    } else {\n        return (\n            <li>\n                <EventCard \n                    event = {event}\n                    showEditOptions = {true}\n                    handleDeleteBtnClick = {handleDeleteBtnClick}\n                    handleEditBtnClick = {() => setEditMode(true)}\n                />\n            </li>\n        );\n    }\n}\n\nexport default EventItem;\n","import React, {useContext, useState} from 'react';\nimport {format} from 'date-fns';\nimport {EventScheduleContext} from './Calendar';\nimport {getEventsScheduledForDate} from '../utils/generalUtils'\nimport EventItem from './EventItem';\nimport EventForm from './EventForm';\nimport {DATE_FORMAT} from '../constants/dateFnsFormats';\n\nfunction DailyEvents(props) {\n    const [showNewEventForm, setShowNewEventForm] = useState(false);\n    const eventScheduleContext = useContext(EventScheduleContext);\n    const eventsObj = getEventsScheduledForDate(eventScheduleContext.eventSchedule, props.selectedDate);\n    const eventList = [];\n    for(let eventId in eventsObj){\n        const event = eventsObj[eventId];\n        eventList.push(\n            <EventItem key={eventId} event={event} date={props.selectedDate}/>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"modalMask\" onClick={() => props.setEventsView(false)}></div>\n            <div className=\"popover modal daily-events\">\n                <div className=\"header flex-bx flex-between\">\n                    <span>{format(props.selectedDate, DATE_FORMAT.fullDate)}</span>\n                    <div>\n                        <button className='mr10 btn-primary' onClick={() => setShowNewEventForm(true)}>\n                            <span className=\"icon\">add</span>\n                            New Event\n                        </button>\n                        <span className=\"icon anim-icon\" onClick={() => props.setEventsView(false)}>close</span>\n                    </div>\n                </div>\n                <div>\n                    <ul className='events-list ul-no-bullets'>\n                        {showNewEventForm &&\n                            <EventForm \n                                date = {props.selectedDate}\n                                closeFormCallBack={() => {setShowNewEventForm(false)}}\n                            />\n                        }\n                        {eventList.length > 0 ? \n                            eventList : \n                            (!showNewEventForm &&\n                                `You don't have any events scheduled for this day...`\n                            )\n                        }\n                    </ul>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default DailyEvents\n","import React from 'react';\nimport EventCard from './EventCard';\n\nfunction ToastNotification(props) {\n    return (\n        <div className=\"toast-notification shake\">\n            <span className=\"fr icon anim-icon\" onClick={props.onCloseHandler}>close</span>\n            <EventCard \n                event = {props.event}\n                showEditOptions = {false}\n            />\n        </div>\n    );\n}\n\nexport default ToastNotification\n","import {get12HourTimeString} from './generalUtils';\n\nexport const requestNotifPermission = () => {\n    Notification.requestPermission();\n}\n\nexport const newDesktopNotification = (event) => {\n    if (!(\"Notification\" in window)) {\n        alert(\"This browser does not support desktop notifications\");\n        return;\n    }\n\n    const title = `${event.subject} \\t ${get12HourTimeString(event.startTime)} - ${get12HourTimeString(event.endTime)}`;\n    const options = {\n        body : event.description\n    };\n    if (Notification.permission === \"granted\") {\n        new Notification(title, options);\n    }\n    else if (Notification.permission !== \"denied\") {\n        Notification.requestPermission().then(function (permission) {\n            if (permission === \"granted\") {\n                new Notification(title, options);\n            }\n        });\n    }\n}","import React, {useContext, useEffect, useRef, useState} from 'react'\nimport {addMinutes, isSameDay} from 'date-fns'\nimport ToastNotification from './ToastNotification'\nimport { EventScheduleContext } from './Calendar'\nimport { getEventsScheduledForDate, convertDateObjToTimeString } from '../utils/generalUtils'\nimport {NOTIFY_BEFORE_MINS} from '../constants/eventNotificationTime'\nimport {newDesktopNotification} from '../utils/notifications'\n\nfunction NotificationHandler(props) {\n    const timeEventsMap = useRef({});\n    const [inAppNotificationObj, setInAppNotificationObj] = useState({});\n    const eventScheduleContext = useContext(EventScheduleContext);\n    const eventsObj = getEventsScheduledForDate(eventScheduleContext.eventSchedule, props.todaysDate);\n\n    const removeFromInAppNotificationObj = (uid) => {\n        const cloneList = {...inAppNotificationObj};\n        cloneList[uid].inAppNotifClosed = true;\n        delete cloneList[uid];\n        setInAppNotificationObj({...cloneList});\n    }\n\n    // prepares the time-event map for notifications only if eventsObj is changed\n    useEffect(() => {\n        timeEventsMap.current = {};\n        for(let eventId in eventsObj){\n            const event = eventsObj[eventId];\n            const timeKey = `t_${convertDateObjToTimeString(event.startDateTime)}`;\n            if (!timeEventsMap.current.hasOwnProperty(timeKey)) {\n                timeEventsMap.current[timeKey] = [];\n            };\n            timeEventsMap.current[timeKey].push(event);\n        }\n    }, [eventsObj])\n\n    // run at one minute intervals, to post notifications\n    useEffect(() => {\n        const minuteTimer = setInterval(() => {\n            //if app is kept open through mid-night, set todaysDate to the new day\n            const dateObj = new Date();\n            if (!isSameDay(dateObj, props.todaysDate)){\n                props.setTodaysDate(new Date());\n            }\n\n            //for each event that is scheduled to start from NOW to NOTIFY_BEFORE_MINS, show notifs\n            let addToNotifObj = {};\n            for (let minsFromNow = 0; minsFromNow <= NOTIFY_BEFORE_MINS; minsFromNow++){\n                const notifyForTime = addMinutes(dateObj, minsFromNow);\n                const formattedHours = ('0' + notifyForTime.getHours().toString()).slice(-2);\n                const formattedMins = ('0' + notifyForTime.getMinutes().toString()).slice(-2);\n                const notifyForTimeKey = `t_${formattedHours}:${formattedMins}`;\n                const events = timeEventsMap.current[notifyForTimeKey]\n                if (events){\n                    for (let event of events){\n                        if (!event.inAppNotifClosed){\n                            addToNotifObj[event.uid] = event;\n                        }\n                        if (!event.desktopNotifShown){\n                            newDesktopNotification(event);\n                            event.desktopNotifShown = true;\n                        }\n                    }\n                }\n            }\n            //add event to in-app notification panel\n            setInAppNotificationObj({...inAppNotificationObj, ...addToNotifObj});\n        }, 10000);\n        return () => {\n            clearInterval(minuteTimer);\n        }\n    }, []);\n\n    const toastNotifs = [];\n    for(let eventUid in inAppNotificationObj){\n        toastNotifs.push(\n            <ToastNotification \n                key = {eventUid}\n                event = {inAppNotificationObj[eventUid]}\n                onCloseHandler = {() => removeFromInAppNotificationObj(eventUid)}\n            />\n        )\n    }\n\n    return (\n        <div className=\"toast-notification-container\">\n            {toastNotifs}\n        </div>\n    )\n}\n\nexport default NotificationHandler\n","//how far ahead of an event would you like to be notified?\nexport let NOTIFY_BEFORE_MINS = 30;","import React, {useContext} from 'react'\nimport {setDate, format} from 'date-fns'\nimport {getEventsScheduledForMonth, convertDateObjToTimeString} from '../utils/generalUtils'\nimport { EventScheduleContext } from './Calendar';\nimport {DATE_FORMAT} from '../constants/dateFnsFormats';\n\nfunction ExportAsCSV(props) {\n    const eventScheduleContext = useContext(EventScheduleContext);\n    \n    const constructEventsArray = () => {\n        const eventsArray = [['Subject', 'Start Date', 'Start Time', 'End Date', 'End Time', 'Location', 'Description']];\n        const eventsObj = getEventsScheduledForMonth(eventScheduleContext.eventSchedule, props.currentMonth);\n        for (let dayKey in eventsObj){\n            const dayStr = dayKey.split('_')[1];\n            const dateObjForEvent = setDate(props.currentMonth, parseInt(dayStr));\n            const formattedDateString = format(dateObjForEvent, DATE_FORMAT.exportDate);\n            const daysEventsObj = eventsObj[dayKey];\n            for (let eventUid in daysEventsObj){\n                const {subject, startDateTime, endDateTime, location, description} = daysEventsObj[eventUid];\n                const startTimeString = convertDateObjToTimeString(startDateTime);\n                const endTimeString = convertDateObjToTimeString(endDateTime);\n                eventsArray.push([subject, formattedDateString, startTimeString, formattedDateString, endTimeString, location, description]);\n            }\n        }\n        return eventsArray;\n    }\n\n    const exportToCSV = (fileName, rows) => {\n        // TODO :: rewrite\n        const getRowStr = (row) => {\n            let finalVal = '';\n            for (let j = 0; j < row.length; j++) {\n                let innerValue = row[j] === null ? '' : row[j].toString()\n                let result = innerValue.replace(/\"/g, '\"\"');\n                if (result.search(/(\"|,|\\n)/g) >= 0){\n                    result = '\"' + result + '\"';\n                }\n                if (j > 0){\n                    finalVal += ',';\n                }\n                if (result === ''){\n                    result = '-';\n                }\n                finalVal += result;\n            }\n            return finalVal + '\\n';\n        };\n    \n        let csvFile = '';\n        for (let row of rows) {\n            csvFile += getRowStr(row);\n        }\n        const blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });\n        const link = document.createElement(\"a\");\n        const url = URL.createObjectURL(blob);\n        link.setAttribute(\"href\", url);\n        link.setAttribute(\"download\", fileName);\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    const handleExportClick = () => {\n        const eventsArray = constructEventsArray();\n        const fileName = `Events for ${format(props.currentMonth, DATE_FORMAT.monthName)}`;\n        exportToCSV(fileName, eventsArray);\n    }\n\n    return (\n        <button className=\"btn-primary export-csv-button\" onClick={handleExportClick}>\n            <span className=\"icon mr5\">save_alt</span>\n            Export events as CSV\n        </button>\n    )\n}\n\nexport default ExportAsCSV","const uuid = () => {\n    function s4 () {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1)\n    }\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4()\n  }\n  \n  export default uuid\n  ","import {insertIntoFormattedEventsObj} from './generalUtils';\n\nconst convertDateTimeObjToUtcString = (event) => {\n    event.startDateTime = event.startDateTime.toUTCString();\n    event.endDateTime = event.endDateTime.toUTCString();\n}\nconst convertUtcStringToUserTzDateObj = (event) => {\n    event.startDateTime = new Date(event.startDateTime.toString());\n    event.endDateTime = new Date(event.endDateTime.toString());\n}\nconst fetchEvents = () => {\n    let jsonStr = localStorage.getItem('calendar-scheduled-events-v2') || '{}';\n    return JSON.parse(jsonStr);\n}\n\nexport const getEventsFromLocalStorage = () => {\n    const formattedEventsObj = {};\n    const eventsObj = fetchEvents();\n    for (let eventUid in eventsObj){\n        convertUtcStringToUserTzDateObj(eventsObj[eventUid]);\n        insertIntoFormattedEventsObj(formattedEventsObj, eventsObj[eventUid]);\n    }\n    return formattedEventsObj;\n}\n\nexport const setEventsToLocalStorage = (action, event) => {\n    const eventsObj = fetchEvents();\n    convertDateTimeObjToUtcString(event);\n    switch (action) {\n        case 'ADD_EDIT':\n            eventsObj[event.uid] = event;\n            break;\n        case 'DELETE':\n            delete eventsObj[event.uid];\n            break;\n        default :\n            break;\n    }\n    \n    localStorage.setItem('calendar-scheduled-events-v2', JSON.stringify(eventsObj));\n}","import uuid from '../utils/uuid';\nimport {getEventsScheduledForDate, insertIntoFormattedEventsObj} from '../utils/generalUtils';\nimport {setEventsToLocalStorage} from '../utils/localStorage';\n\nexport const eventScheduleReducer = (state, action) => {\n    let newState = {...state};\n    \n    const deleteEventFromDate = (event) => {\n        let eventsObjForDate = getEventsScheduledForDate(newState, event.startDateTime);\n        delete eventsObjForDate[event.uid];\n    };\n\n    const addEditEventForDate = (event) => {\n        insertIntoFormattedEventsObj(newState, event);\n    };\n    \n    switch (action.type) {\n        case 'ADD_EVENT':\n            action.event.uid = uuid();\n            addEditEventForDate(action.event);\n            setEventsToLocalStorage('ADD_EDIT', {...action.event});\n            break;\n        case 'EDIT_EVENT':\n            addEditEventForDate(action.event);\n            setEventsToLocalStorage('ADD_EDIT', {...action.event});\n            break;\n        case 'DELETE_EVENT':\n            deleteEventFromDate(action.event);\n            setEventsToLocalStorage('DELETE', {...action.event});\n            break;\n        default:\n            break;\n    }\n    return newState;\n};\n","import React, { useState, useReducer, createContext, useCallback } from \"react\";\n\nimport Header from './Header';\nimport DaysOfTheWeek from './DaysOfTheWeek';\nimport CalenderBody from './CalenderBody';\nimport DailyEvents from \"./DailyEvents\";\nimport NotificationHandler from './NotificationHandler';\nimport ExportAsCSV from './ExportAsCSV';\nimport {eventScheduleReducer} from '../reducers/eventScheduleReducer';\nimport {getEventsFromLocalStorage} from '../utils/localStorage';\n\nexport const EventScheduleContext = createContext();\n\nconst initialEventSchedule = getEventsFromLocalStorage() || {};\n\nconst Calendar = () => {\n    const [todaysDate, setTodaysDate] = useState(new Date());\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [eventsView, setEventsView] = useState(false);\n    \n    const [eventSchedule, eventScheduleDispatch] = useReducer(eventScheduleReducer, initialEventSchedule);\n\n    const onDateClick = useCallback((day) => {\n        setSelectedDate(day);\n        setEventsView(true);\n    }, []);\n\n    return (\n        <EventScheduleContext.Provider value={{eventSchedule: eventSchedule, eventScheduleDispatch: eventScheduleDispatch}}>\n            <div className=\"calendar\">\n                <Header currentMonth={selectedDate} setCurrentMonth={setSelectedDate}/>\n                <DaysOfTheWeek />\n                <CalenderBody currentMonth={selectedDate} todaysDate={todaysDate} onDateClick={onDateClick}/>\n                {eventsView && \n                    <DailyEvents selectedDate={selectedDate} setEventsView={setEventsView} />\n                }\n                <NotificationHandler todaysDate={todaysDate} setTodaysDate={setTodaysDate}/>\n            </div>\n            <ExportAsCSV currentMonth={selectedDate}/>\n        </EventScheduleContext.Provider>\n    );\n};\n\nexport default Calendar;","import React from 'react';\nimport Calendar from './components/Calendar'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Calendar />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}