{"version":3,"sources":["components/Header.js","components/DaysOfTheWeek.js","utils/generalUtils.js","components/CalendarCell.js","components/CalenderBody.js","components/EventForm.js","components/EventCard.js","components/EventItem.js","components/DailyEvents.js","components/ToastNotification.js","utils/notifications.js","components/NotificationHandler.js","constants/eventNotificationTime.js","components/ExportAsCSV.js","utils/uuid.js","reducers/eventScheduleReducer.js","utils/localStorage.js","components/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","onClick","setCurrentMonth","subMonths","currentMonth","format","addMonths","DaysOfTheWeek","daysJsx","day","push","key","getEventsScheduledForDate","eventSchedule","dateObj","eventsObj","year_key","month_key","date_key","get12HourTimeString","_24HrTimeString","splitTime","split","hourNum","parseInt","minStr","period","hourStr","toString","slice","timeComparisionMethod","a","b","aTimeSplit","bTimeSplit","comparisonResult","CalendarCell","cellContainerRef","useRef","useState","eventListOverflow","setEventListOverflow","eventScheduleContext","useContext","EventScheduleContext","eventList","eventId","event","startTime","subject","useEffect","current","scrollHeight","clientHeight","isSameMonth","monthStart","isSameDay","todaysDate","ref","onDateClick","CalenderBody","startOfMonth","monthEnd","endOfMonth","startDate","startOfWeek","endDate","endOfWeek","rows","days","i","addDays","EventForm","eventDetails","setSubject","setStartTime","endTime","setEndTime","location","setLocation","description","setDescription","subjectErrorMessage","setSubjectErrorMessage","timeErrorMessage","setTimeErrorMessage","validateForm","isValid","trim","onSubmit","ev","preventDefault","dispatchType","uid","eventScheduleDispatch","type","date","closeFormCallBack","htmlFor","name","maxLength","placeholder","autoFocus","value","onChange","target","EventCard","showEditOptions","title","handleEditBtnClick","handleDeleteBtnClick","EventItem","editMode","setEditMode","DailyEvents","showNewEventForm","setShowNewEventForm","selectedDate","Fragment","setEventsView","length","ToastNotification","onCloseHandler","newDesktopNotification","window","options","body","Notification","permission","requestPermission","then","alert","NotificationHandler","timeEventsMap","inAppNotificationObj","setInAppNotificationObj","timeKey","hasOwnProperty","minuteTimer","setInterval","Date","setTodaysDate","addToNotifObj","minsFromNow","notifyForTime","addMinutes","formattedHours","getHours","formattedMins","getMinutes","notifyForTimeKey","events","inAppNotifClosed","desktopNotifShown","clearInterval","toastNotifs","eventUid","cloneList","removeFromInAppNotificationObj","ExportAsCSV","constructEventsArray","eventsArray","getEventsScheduledForMonth","dayKey","dayStr","dateObjForEvent","setDate","formattedDate","daysEventsObj","fileName","getRowStr","row","finalVal","j","innerValue","toLocaleString","result","replace","search","csvFile","blob","Blob","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","appendChild","click","removeChild","exportToCSV","uuid","s4","Math","floor","random","substring","eventScheduleReducer","state","action","newState","addEditEventForDate","map","rearrangedMap","sortedListOfKeys","Object","keys","sort","rearrangeMapByEarliest","localStorage","setItem","JSON","stringify","createContext","initialEventSchedule","jsonStr","getItem","parse","getEventsFromLocalStorage","Calendar","setSelectedDate","eventsView","useReducer","useCallback","Provider","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.31ce4d07.chunk.js","sourcesContent":["import React from 'react';\nimport {format, addMonths, subMonths} from 'date-fns';\n\nfunction Header(props) {\n    const dateFormat = \"MMMM yyyy\";\n\n    const nextMonth = () => {\n        props.setCurrentMonth(addMonths(props.currentMonth, 1));\n    };\n\n    const prevMonth = () => {\n        props.setCurrentMonth(subMonths(props.currentMonth, 1));\n    };\n    \n    return (\n        <div className=\"header row row-middle flex-around\">\n            <span className=\"icon anim-icon\" onClick={prevMonth}>chevron_left</span>\n            <span>{format(props.currentMonth, dateFormat)}</span>\n            <span className=\"icon anim-icon\" onClick={nextMonth}>chevron_right</span>\n        </div>\n    );\n}\n\nexport default Header\n","import React from 'react'\n\nfunction DaysOfTheWeek() {\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const daysJsx = [];\n    for (let day of days) {\n        daysJsx.push(\n            <div className=\"column col-center\" key={day}>\n                {day}\n            </div>\n        );\n    }\n    return <div className=\"days row\">{daysJsx}</div>;\n}\n\nexport default DaysOfTheWeek\n","import {format} from 'date-fns';\n\nexport const getEventsScheduledForDate = (eventSchedule, dateObj) => {\n    let eventsObj = {};\n    const year_key = `y_${format(dateObj, 'yyyy')}`;\n    const month_key = `m_${format(dateObj, 'MM')}`;\n    const date_key = `d_${format(dateObj, 'dd')}`;\n    if (eventSchedule[year_key] && eventSchedule[year_key][month_key] && eventSchedule[year_key][month_key][date_key]){\n        eventsObj = eventSchedule[year_key][month_key][date_key];\n    }\n    return eventsObj;\n};\n\nexport const getEventsScheduledForMonth = (eventSchedule, dateObj) => {\n    let eventsObj = {};\n    const year_key = `y_${format(dateObj, 'yyyy')}`;\n    const month_key = `m_${format(dateObj, 'MM')}`;\n    if (eventSchedule[year_key] && eventSchedule[year_key][month_key]){\n        eventsObj = eventSchedule[year_key][month_key];\n    }\n    return eventsObj;\n};\n\nexport const get12HourTimeString = (_24HrTimeString) => {\n    if (!_24HrTimeString) {return ''}\n\n    const splitTime = _24HrTimeString.split(':');\n    let hourNum = parseInt(splitTime[0]);\n    let minStr = splitTime[1];\n    let period = 'AM';\n    if (hourNum >= 12){\n        period = 'PM';\n        hourNum %= 12;\n    }\n    let hourStr = (hourNum === 0) ? '12' : ('0' + hourNum.toString()).slice(-2);\n    return `${hourStr}:${minStr} ${period}`;\n}\n\nexport const rearrangeMapByEarliest = (map) => {\n    const listOfKeys = Object.keys(map);\n    const rearrangedMap = {};\n    const sortedListOfKeys = listOfKeys.sort((a, b) => {\n        if (!map[a].startTime && !map[b].startTime) {return 0}\n        if (!map[a].startTime) {return -1}\n        if (!map[b].startTime) {return 1}\n\n        return timeComparisionMethod(map[a].startTime, map[b].startTime);\n    });\n    for (let key of sortedListOfKeys){\n        rearrangedMap[key] = map[key];\n    }\n    return rearrangedMap;\n};\n\nconst timeComparisionMethod = (a, b) => {\n    const aTimeSplit = a.split(':');\n    const bTimeSplit = b.split(':');\n    \n    let comparisonResult = parseInt(aTimeSplit[0]) - parseInt(bTimeSplit[0]);\n    comparisonResult = (comparisonResult === 0) ? (parseInt(aTimeSplit[1]) - parseInt(bTimeSplit[1])) : comparisonResult;\n    return comparisonResult;\n}\n\nexport const isTimeStrInOrder = (a, b) => {\n    let comparisionResult = timeComparisionMethod(a, b);\n    return (comparisionResult < 0);\n}","import React, {useState, useContext, useEffect, useRef} from 'react'\nimport {format, isSameMonth, isSameDay} from 'date-fns';\nimport { EventScheduleContext } from './Calendar';\nimport {getEventsScheduledForDate, get12HourTimeString} from '../utils/generalUtils';\n\nfunction CalendarCell(props) {\n    const cellContainerRef = useRef(null);\n    const [eventListOverflow, setEventListOverflow] = useState(false);\n    const eventScheduleContext = useContext(EventScheduleContext);\n    const dateFormat = \"d\";\n    const eventsObj = getEventsScheduledForDate(eventScheduleContext.eventSchedule, props.day);\n    const eventList = [];\n    \n    for(let eventId in eventsObj){\n        const event = eventsObj[eventId];\n        eventList.push(\n            <li key={eventId}>\n                {event.startTime && \n                    <span className='mr5'>{get12HourTimeString(event.startTime)}</span>\n                }\n                <span className='event-subject'>{event.subject}</span>\n            </li>\n        );\n    }\n\n    useEffect(() => {\n        (cellContainerRef.current.scrollHeight - cellContainerRef.current.clientHeight) > 0 ? setEventListOverflow(true) : setEventListOverflow(false);\n    }, [eventsObj])\n    \n    return(\n        <div\n            className={`column cell ${!isSameMonth(props.day, props.monthStart)\n                ? \"disabled\" : isSameDay(props.day, props.todaysDate)\n                    ? \"selected\" : \"\"}`}\n            ref={cellContainerRef}\n            onClick={() => props.onDateClick(props.day)}\n        >\n            <span className=\"number\">{format(props.day, dateFormat)}</span>\n            <ul className=\"ul-no-bullets cell-event-list\">{eventList}</ul>\n            {eventListOverflow &&\n                <span className='overflow-banner'>...more events</span>\n            }\n        </div>\n    );\n}\n\nexport default CalendarCell;\n","import React from 'react'\nimport { startOfWeek, endOfWeek, addDays, startOfMonth, endOfMonth } from \"date-fns\";\nimport CalendarCell from './CalendarCell';\n\nfunction CalenderBody(props) {\n    const monthStart = startOfMonth(props.currentMonth);\n    const monthEnd = endOfMonth(monthStart);\n    const startDate = startOfWeek(monthStart);\n    const endDate = endOfWeek(monthEnd);\n    const rows = [];\n    let days = [];\n    let day = startDate;\n\n    while (day <= endDate) {\n        for (let i = 0; i < 7; i++) {\n            days.push(\n                <CalendarCell \n                    day = {day}\n                    key = {day}\n                    monthStart = {monthStart}\n                    todaysDate = {props.todaysDate}\n                    onDateClick = {props.onDateClick}\n                />\n            );\n            day = addDays(day, 1);\n        }\n        rows.push(\n            <div className=\"row\" key={day}> {days} </div>\n        );\n        days = [];\n    }\n\n    return <div className=\"body\">{rows}</div>;\n}\n\nexport default CalenderBody;\n","import React, {useState, useContext} from 'react'\nimport { EventScheduleContext } from './Calendar'\nimport {isTimeStrInOrder} from '../utils/generalUtils'\n\nfunction EventForm(props) {\n    const eventDetails = props.event || {};\n    const [subject, setSubject] = useState(eventDetails.subject || '');\n    const [startTime, setStartTime] = useState(eventDetails.startTime || '');\n    const [endTime, setEndTime] = useState(eventDetails.endTime || '');\n    const [location, setLocation] = useState(eventDetails.location || '');\n    const [description, setDescription] = useState(eventDetails.description || '');\n    const [subjectErrorMessage, setSubjectErrorMessage] = useState('')\n    const [timeErrorMessage, setTimeErrorMessage] = useState('')\n    const eventScheduleContext = useContext(EventScheduleContext);\n    \n    const validateForm = () => {\n        let isValid = true;\n        if (subject.trim() === ''){\n            setSubjectErrorMessage('Subject cannot be empty');\n            isValid = false;\n        }\n        if (startTime && !isTimeStrInOrder(startTime, endTime)){\n            setTimeErrorMessage('End Time must be ahead of start time')\n            isValid = false;\n        }\n        return isValid;\n    }\n    const handleFormSubmit = (ev) => {\n        ev.preventDefault();\n        const isValid = validateForm();\n        if (isValid){\n            const dispatchType = eventDetails.uid ? 'EDIT_EVENT' : 'ADD_EVENT';\n            const uid = eventDetails.uid;\n            const event = {\n                uid,\n                subject,\n                startTime,\n                endTime,\n                location,\n                description\n            };\n            eventScheduleContext.eventScheduleDispatch({\n                type : dispatchType,\n                date : props.date,\n                event : event\n            });\n            props.closeFormCallBack();\n        }\n    };\n\n    return (\n        <li className='event-card'>\n            <form className='event-form' onSubmit={handleFormSubmit}>\n                <span className=\"form-row\">\n                    <label htmlFor=\"subject\">Subject *</label>\n                    <input\n                        name=\"subject\"\n                        type=\"type\"\n                        maxLength=\"30\"\n                        placeholder={'Event subject'}\n                        autoFocus={true}\n                        value={subject}\n                        onChange={(ev) => setSubject(ev.target.value)}\n                    />\n                </span>\n                {subjectErrorMessage && \n                    <div className=\"form-validation-error\">{subjectErrorMessage}</div>\n                }\n                <span className=\"form-row\">\n                    <label htmlFor=\"startTime\">Start time</label>\n                    <input\n                        className=\"mr10\"\n                        name=\"startTime\"\n                        type=\"time\"\n                        value={startTime}\n                        onChange={(ev) => setStartTime(ev.target.value)}\n                    />\n                    <label htmlFor=\"endTime\">End time</label>\n                    <input\n                        name=\"endTime\"\n                        type=\"time\"\n                        value={endTime}\n                        onChange={(ev) => setEndTime(ev.target.value)}\n                    />\n                </span>\n                {timeErrorMessage && \n                    <div className=\"form-validation-error\">{timeErrorMessage}</div>\n                }\n                <span className=\"form-row\">\n                    <label htmlFor=\"location\">Location</label>\n                    <input\n                        name=\"location\"\n                        type=\"text\"\n                        value={location}\n                        onChange={(ev) => setLocation(ev.target.value)}\n                    />\n                </span>\n                <span className=\"form-row\">\n                    <label htmlFor=\"description\">Description</label>\n                    <textarea\n                        name=\"description\"\n                        type=\"text\"\n                        value={description}\n                        onChange={(ev) => setDescription(ev.target.value)}\n                    />\n                </span>\n\n                <button type=\"submit\" className=\"mr10 btn-primary\">Save</button>\n                <button type=\"cancel\" onClick={() => props.closeFormCallBack()}>Cancel</button>\n            </form>\n        </li>\n    )\n}\n\nexport default EventForm\n","import React from 'react'\nimport {get12HourTimeString} from '../utils/generalUtils'\n\nfunction EventCard(props) {\n    return (\n        <div className='event-card'>\n            <div className='flex-bx flex-between row-middle pb5'>\n                <div className='card-title'>\n                    <span className='event-subject mr10'>{props.event.subject}</span>\n                    {props.event.startTime &&\n                        <span>{get12HourTimeString(props.event.startTime)} - {get12HourTimeString(props.event.endTime)}</span>\n                    }\n                </div>\n                {props.showEditOptions && \n                    <div className='flex-bx'>\n                        <span className=\"icon anim-icon mr10\" title='Edit' onClick={props.handleEditBtnClick}>edit</span>\n                        <span className=\"icon anim-icon\" title='Delete' onClick={props.handleDeleteBtnClick}>delete_outline</span>\n                    </div>\n                }\n            </div>\n            {props.event.location && \n                <div className='flex-bx row-middle pb5'>\n                    <span className=\"icon\">location_on</span>\n                    <span>{props.event.location}</span>\n                </div>\n            }\n            {props.event.description && \n                <span>{props.event.description}</span>\n            }\n        </div>\n    )\n}\n\nexport default EventCard\n","import React, {useState, useContext} from 'react';\nimport { EventScheduleContext } from './Calendar';\nimport EventForm from './EventForm';\nimport EventCard from './EventCard';\n\nfunction EventItem(props) {\n    const {event} = props;\n    const [editMode, setEditMode] = useState(false);\n    const eventScheduleContext = useContext(EventScheduleContext);\n    const handleDeleteBtnClick = () => {\n        eventScheduleContext.eventScheduleDispatch({\n            type : 'DELETE_EVENT',\n            date : props.date,\n            event : event\n        });\n    }\n\n    if (editMode){\n        return (\n            <EventForm \n                date = {props.date}\n                closeFormCallBack = {() => {setEditMode(false)}}\n                event = {event}\n            />\n        )\n    } else {\n        return (\n            <li>\n                <EventCard \n                    event = {event}\n                    showEditOptions = {true}\n                    handleDeleteBtnClick = {handleDeleteBtnClick}\n                    handleEditBtnClick = {() => setEditMode(true)}\n                />\n            </li>\n        );\n    }\n}\n\nexport default EventItem;\n","import React, {useContext, useState} from 'react';\nimport {format} from 'date-fns';\nimport {EventScheduleContext} from './Calendar';\nimport {getEventsScheduledForDate} from '../utils/generalUtils'\nimport EventItem from './EventItem';\nimport EventForm from './EventForm';\n\nfunction DailyEvents(props) {\n    const dateFormat = 'dd MMMM yyyy';\n    const [showNewEventForm, setShowNewEventForm] = useState(false);\n    const eventScheduleContext = useContext(EventScheduleContext);\n    const eventsObj = getEventsScheduledForDate(eventScheduleContext.eventSchedule, props.selectedDate);\n    const eventList = [];\n    for(let eventId in eventsObj){\n        const event = eventsObj[eventId];\n        eventList.push(\n            <EventItem key={eventId} event={event} date={props.selectedDate}/>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"modalMask\" onClick={() => props.setEventsView(false)}></div>\n            <div className=\"popover modal daily-events\">\n                <div className=\"header flex-bx flex-between\">\n                    <span>{format(props.selectedDate, dateFormat)}</span>\n                    <div>\n                        <button className='mr10 btn-primary' onClick={() => setShowNewEventForm(true)}>\n                            <span className=\"icon\">add</span>\n                            New Event\n                        </button>\n                        <span className=\"icon anim-icon\" onClick={() => props.setEventsView(false)}>close</span>\n                    </div>\n                </div>\n                <div>\n                    <ul className='events-list ul-no-bullets'>\n                        {showNewEventForm &&\n                            <EventForm \n                                date = {props.selectedDate}\n                                closeFormCallBack={() => {setShowNewEventForm(false)}}\n                            />\n                        }\n                        {eventList.length > 0 ? \n                            eventList : \n                            (!showNewEventForm &&\n                                `You don't have any events scheduled for this day...`\n                            )\n                        }\n                    </ul>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default DailyEvents\n","import React from 'react';\nimport EventCard from './EventCard';\n\nfunction ToastNotification(props) {\n    return (\n        <div className=\"toast-notification shake\">\n            <span className=\"fr icon anim-icon\" onClick={props.onCloseHandler}>close</span>\n            <EventCard \n                event = {props.event}\n                showEditOptions = {false}\n            />\n        </div>\n    );\n}\n\nexport default ToastNotification\n","import {get12HourTimeString} from './generalUtils';\n\nexport const requestNotifPermission = () => {\n    Notification.requestPermission();\n}\n\nexport const newDesktopNotification = (event) => {\n    if (!(\"Notification\" in window)) {\n        alert(\"This browser does not support desktop notifications\");\n        return;\n    }\n\n    const title = `${event.subject} \\t ${get12HourTimeString(event.startTime)} - ${get12HourTimeString(event.endTime)}`;\n    const options = {\n        body : event.description\n    };\n    if (Notification.permission === \"granted\") {\n        new Notification(title, options);\n    }\n    else if (Notification.permission !== \"denied\") {\n        Notification.requestPermission().then(function (permission) {\n            if (permission === \"granted\") {\n                new Notification(\"Hi there!\");\n            }\n        });\n    }\n}","import React, {useContext, useEffect, useRef, useState} from 'react'\nimport {addMinutes, isSameDay} from 'date-fns'\nimport ToastNotification from './ToastNotification'\nimport { EventScheduleContext } from './Calendar'\nimport {getEventsScheduledForDate} from '../utils/generalUtils'\nimport {notifyBeforeMins} from '../constants/eventNotificationTime'\nimport {newDesktopNotification} from '../utils/notifications'\n\nfunction NotificationHandler(props) {\n    const timeEventsMap = useRef({});\n    const [inAppNotificationObj, setInAppNotificationObj] = useState({});\n    const eventScheduleContext = useContext(EventScheduleContext);\n    const eventsObj = getEventsScheduledForDate(eventScheduleContext.eventSchedule, props.todaysDate);\n\n    const removeFromInAppNotificationObj = (uid) => {\n        const cloneList = {...inAppNotificationObj};\n        cloneList[uid].inAppNotifClosed = true;\n        delete cloneList[uid];\n        setInAppNotificationObj({...cloneList});\n    }\n\n    // prepares the time-event map for notifications only if eventsObj is changed\n    useEffect(() => {\n        timeEventsMap.current = {};\n        for(let eventId in eventsObj){\n            const event = eventsObj[eventId];\n            const timeKey = `t_${event.startTime}`;\n            if (!timeEventsMap.current.hasOwnProperty(timeKey)) {\n                timeEventsMap.current[timeKey] = [];\n            };\n            timeEventsMap.current[timeKey].push(event);\n        }\n    }, [eventsObj])\n\n    // run at one minute intervals, to post notifications\n    useEffect(() => {\n        const minuteTimer = setInterval(() => {\n            //if app is kept open for over a day, update todaysDate value\n            const dateObj = new Date();\n            if (!isSameDay(dateObj, props.todaysDate)){\n                props.setTodaysDate(new Date());\n            }\n\n            //for each event of startTime from now to notifyBeforeMins, show notifs\n            let addToNotifObj = {};\n            for (let minsFromNow = 0; minsFromNow <= notifyBeforeMins; minsFromNow++){\n                const notifyForTime = addMinutes(dateObj, minsFromNow);\n                const formattedHours = ('0' + notifyForTime.getHours().toString()).slice(-2);\n                const formattedMins = ('0' + notifyForTime.getMinutes().toString()).slice(-2);\n                const notifyForTimeKey = `t_${formattedHours}:${formattedMins}`;\n                const events = timeEventsMap.current[notifyForTimeKey]\n                if (events){\n                    for (let event of events){\n                        if (!event.inAppNotifClosed){\n                            addToNotifObj[event.uid] = event;\n                        }\n                        if (!event.desktopNotifShown){\n                            newDesktopNotification(event);\n                            event.desktopNotifShown = true;\n                        }\n                    }\n                }\n            }\n            setInAppNotificationObj({...inAppNotificationObj, ...addToNotifObj});\n        }, 10000);\n        return () => {\n            clearInterval(minuteTimer);\n        }\n    }, []);\n\n    const toastNotifs = [];\n    for(let eventUid in inAppNotificationObj){\n        toastNotifs.push(\n            <ToastNotification \n                key = {eventUid}\n                event = {inAppNotificationObj[eventUid]}\n                onCloseHandler = {() => removeFromInAppNotificationObj(eventUid)}\n            />\n        )\n    }\n\n    return (\n        <div className=\"toast-notification-container\">\n            {toastNotifs}\n        </div>\n    )\n}\n\nexport default NotificationHandler\n","//how far ahead of an event would you like to be notified?\nexport let notifyBeforeMins = 30;","import React, {useContext} from 'react'\nimport {setDate, format} from 'date-fns'\nimport {getEventsScheduledForMonth} from '../utils/generalUtils'\nimport { EventScheduleContext } from './Calendar';\n\nfunction ExportAsCSV(props) {\n    const eventScheduleContext = useContext(EventScheduleContext);\n    \n    const constructEventsArray = () => {\n        const eventsArray = [['Subject', 'Start Date', 'Start Time', 'End Date', 'End Time', 'Location', 'Description']];\n        const eventsObj = getEventsScheduledForMonth(eventScheduleContext.eventSchedule, props.currentMonth);\n        const dateFormat = 'dd/MM/yy';\n        for (let dayKey in eventsObj){\n            const dayStr = dayKey.split('_')[1];\n            const dateObjForEvent = setDate(props.currentMonth, parseInt(dayStr));\n            const formattedDate = format(dateObjForEvent, dateFormat);\n            const daysEventsObj = eventsObj[dayKey];\n            for (let eventUid in daysEventsObj){\n                const {subject, startTime, endTime, location, description} = daysEventsObj[eventUid];\n                eventsArray.push([subject, formattedDate, startTime, formattedDate, endTime, location, description]);\n            }\n        }\n        return eventsArray;\n    }\n\n    const exportToCSV = (fileName, rows) => {\n        const getRowStr = (row) => {\n            let finalVal = '';\n            for (let j = 0; j < row.length; j++) {\n                let innerValue = row[j] === null ? '' : row[j].toString();\n                if (row[j] instanceof Date) {\n                    innerValue = row[j].toLocaleString();\n                };\n                let result = innerValue.replace(/\"/g, '\"\"');\n                if (result.search(/(\"|,|\\n)/g) >= 0){\n                    result = '\"' + result + '\"';\n                }\n                if (j > 0){\n                    finalVal += ',';\n                }\n                if (result === ''){\n                    result = '-';\n                }\n                finalVal += result;\n            }\n            return finalVal + '\\n';\n        };\n    \n        let csvFile = '';\n        for (let row of rows) {\n            csvFile += getRowStr(row);\n        }\n        const blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });\n        const link = document.createElement(\"a\");\n        const url = URL.createObjectURL(blob);\n        link.setAttribute(\"href\", url);\n        link.setAttribute(\"download\", fileName);\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    const handleExportClick = () => {\n        const eventsArray = constructEventsArray();\n        const fileName = `Events for ${format(props.currentMonth, 'LLLL')}`;\n        exportToCSV(fileName, eventsArray);\n    }\n\n    return (\n        <button className=\"btn-primary export-csv-button\" onClick={handleExportClick}>\n            <span className=\"icon mr5\">save_alt</span>\n            Export events as CSV\n        </button>\n    )\n}\n\nexport default ExportAsCSV","const uuid = () => {\n    function s4 () {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1)\n    }\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4()\n  }\n  \n  export default uuid\n  ","import {format} from 'date-fns';\nimport uuid from '../utils/uuid';\nimport {getEventsScheduledForDate, rearrangeMapByEarliest} from '../utils/generalUtils';\nimport {setEventsToLocalStorage} from '../utils/localStorage';\n\nexport const eventScheduleReducer = (state, action) => {\n    let newState = {...state};\n\n    const deleteEventFromDate = (uid, dateObj) => {\n        let eventsObjForDate = getEventsScheduledForDate(newState, action.date);\n        delete eventsObjForDate[uid];\n    };\n\n    const addEditEventForDate = (event, dateObj) => {\n        const year_key = `y_${format(dateObj, 'yyyy')}`;\n        const month_key = `m_${format(dateObj, 'MM')}`;\n        const date_key = `d_${format(dateObj, 'dd')}`;\n        if (!newState[year_key]){\n            newState[year_key] = {};\n        }\n        if (!newState[year_key][month_key]){\n            newState[year_key][month_key] = {};\n        }\n        if (!newState[year_key][month_key][date_key]){\n            newState[year_key][month_key][date_key] = {};\n        }\n        newState[year_key][month_key][date_key][event.uid] = event;\n        newState[year_key][month_key][date_key] = rearrangeMapByEarliest(newState[year_key][month_key][date_key]);\n    };\n    \n    switch (action.type) {\n        case 'ADD_EVENT':\n            action.event.uid = uuid();\n            addEditEventForDate(action.event, action.date);\n            break;\n        case 'EDIT_EVENT':\n            addEditEventForDate(action.event, action.date);\n            break;\n        case 'DELETE_EVENT':\n            deleteEventFromDate(action.event.uid, action.date);\n            break;\n        default:\n            break;\n    }\n    setEventsToLocalStorage(newState);\n    return newState;\n};\n","export const getEventsFromLocalStorage = () => {\n    let jsonStr = localStorage.getItem('calendar-scheduled-events');\n    return JSON.parse(jsonStr);\n}\n\nexport const setEventsToLocalStorage = (eventsObj) => {\n    localStorage.setItem('calendar-scheduled-events', JSON.stringify(eventsObj));\n}\n\n\n/*\nlet testEvents = {\n    y_2020: {\n        m_04: {\n            d_10: {\n                '2cca33c4-294a-c05d-91ca-4b24c111dfdv' : {\n                    uid : '2cca33c4-294a-c05d-91ca-4b24c111dfdv',\n                    subject : 'test',\n                    startTime : '1:20',\n                    endTime : '8:45',\n                    location : 'office',\n                    description : 'this is a test description'\n                },\n                '1cca33c4-294a-c05d-91ca-4b24c111dfdd' : {\n                    uid : '1cca33c4-294a-c05d-91ca-4b24c111dfdd',\n                    subject : 'moi birthday',\n                    startTime : '11:20',\n                    endTime : '18:45',\n                    location : 'house',\n                    description : 'yo shawty ish your birthday, we gonna paarty like ish yo birthday!'\n                }\n            },\n            d_15: {\n                '3cca33c4-294a-c05d-91ca-4b24c111dfdv' : {\n                    uid : '3cca33c4-294a-c05d-91ca-4b24c111dfdv',\n                    subject : 'aa',\n                    startTime : '14:20',\n                    endTime : '18:00',\n                    location : 'toot',\n                    description : 'teet'\n                }\n            }\n        },\n        m_08: {\n            d_23: {\n                '5cca33c4-294a-c05d-91ca-4b24c111dfdv' : {\n                    uid : '5cca33c4-294a-c05d-91ca-4b24c111dfdv',\n                    subject : 'today yaar 222',\n                    startTime : '01:20',\n                    endTime : '12:45',\n                    location : 'home office - 2',\n                    description : 'meeting'\n                },\n                '4cca33c4-294a-c05d-91ca-4b24c111dfdv' : {\n                    uid : '4cca33c4-294a-c05d-91ca-4b24c111dfdv',\n                    subject : 'today yaar',\n                    startTime : '11:20',\n                    endTime : '18:45',\n                    location : 'home office',\n                    description : 'meeting'\n                }\n            }\n        }\n    }\n};\n*/","import React, { useState, useReducer, createContext, useCallback } from \"react\";\n\nimport Header from './Header';\nimport DaysOfTheWeek from './DaysOfTheWeek';\nimport CalenderBody from './CalenderBody';\nimport DailyEvents from \"./DailyEvents\";\nimport NotificationHandler from './NotificationHandler';\nimport ExportAsCSV from './ExportAsCSV';\nimport {eventScheduleReducer} from '../reducers/eventScheduleReducer';\nimport {getEventsFromLocalStorage} from '../utils/localStorage';\n\nexport const EventScheduleContext = createContext();\n\nconst initialEventSchedule = getEventsFromLocalStorage() || {};\n\nconst Calendar = () => {\n    const [todaysDate, setTodaysDate] = useState(new Date());\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [eventsView, setEventsView] = useState(false);\n    \n    const [eventSchedule, eventScheduleDispatch] = useReducer(eventScheduleReducer, initialEventSchedule);\n\n    const onDateClick = useCallback((day) => {\n        setSelectedDate(day);\n        setEventsView(true);\n    }, []);\n\n    return (\n        <EventScheduleContext.Provider value={{eventSchedule: eventSchedule, eventScheduleDispatch: eventScheduleDispatch}}>\n            <div className=\"calendar\">\n                <Header currentMonth={selectedDate} setCurrentMonth={setSelectedDate}/>\n                <DaysOfTheWeek />\n                <CalenderBody currentMonth={selectedDate} todaysDate={todaysDate} onDateClick={onDateClick}/>\n                {eventsView && \n                    <DailyEvents selectedDate={selectedDate} setEventsView={setEventsView} />\n                }\n                <NotificationHandler todaysDate={todaysDate} setTodaysDate={setTodaysDate}/>\n            </div>\n            <ExportAsCSV currentMonth={selectedDate}/>\n        </EventScheduleContext.Provider>\n    );\n};\n\nexport default Calendar;","import React from 'react';\nimport Calendar from './components/Calendar'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Calendar />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}